package main

import (
	"bufio"
	"fmt"
	"html/template"
	"os"
	"strings"
)

// Code templates
const header = `// Code generated by gen_client. DO NOT EDIT.
package client

import (
	"github.com/xenomote/sc2api/api"
)
`

const methodTemplate = `
func (c *connection) {{.Arg}}({{.Arg}} api.Request{{.Name}}) (*api.Response{{.Name}}, error) {
	r, err := c.request(&api.Request{
		Request: &api.Request_{{.Short}}{
			{{.Short}}: &{{.Arg}},
		},
	})
	return r.Get{{.Short}}(), err
}
`

type methodData struct {
	Name  string
	Short string
	Arg   string
}

func main() {
	t := template.Must(template.New("method").Parse(methodTemplate))

	file, err := os.Create("client/api.go")
	check(err)
	defer file.Close()

	writer := bufio.NewWriter(file)
	fmt.Fprint(writer, header)

	for _, name := range getRequestTypes() {
		d := methodData{
			Name:  name,
			Short: name,
			Arg:   strings.ToLower(name[:1]) + name[1:],
		}

		// This one is a special snowflake
		if d.Short == "ObsAction" {
			d.Name = "ObserverAction"
		}

		t.Execute(writer, d)
	}

	check(writer.Flush())
}

func getRequestTypes() []string {
	var lines []string

	file, err := os.Open("api/sc2api.pb.go")
	check(err)
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		if strings.TrimSpace(scanner.Text()) == "type Request struct {" {
			break
		}
	}

	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line == "}" {
			break
		}

		if !strings.HasPrefix(line, "//") {
			continue
		}

		parts := strings.Split(line, "*Request_")
		if len(parts) < 2 {
			continue
		}
		lines = append(lines, parts[1])
	}

	return lines
}

func check(err error) {
	if err != nil {
		panic(err)
	}
}
