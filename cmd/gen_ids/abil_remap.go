package main

import (
	"bufio"
	"fmt"
	"os"
	"sort"
)

func remapAbilities(ids map[uint32]uint32, names map[uint32]string) {
	remaps := map[string]string{}
	for from, to := range ids {
		remaps[names[from]] = names[to]
	}

	writeRemapsTo(remaps)
}

const remaps = `// Code generated by gen_ids. DO NOT EDIT.
package ability

import (
	"github.com/xenomote/sc2api/api"
)

// Remap returns the more generic version of the given ability (if any).
func Remap(ability api.AbilityID) api.AbilityID {
	if generic, ok := remap[ability]; ok {
		return generic
	}
	return ability
}

var remap = map[api.AbilityID]api.AbilityID{
`

func writeRemapsTo(values map[string]string) {
	fmtString := "\t%-*v %v,\n"

	maxLen := 0
	for key := range values {
		if len(key) > maxLen {
			maxLen = len(key)
		}
	}

	file, err := os.Create("enums/ability/remap.go")
	check(err)
	defer file.Close()

	w := bufio.NewWriter(file)

	fmt.Fprint(w, remaps)

	keys := make([]string, 0, len(values))
	for k := range values {
		keys = append(keys, k)
	}
	sort.StringSlice(keys).Sort()

	for _, key := range keys {
		fmt.Fprintf(w, fmtString, maxLen+1, key+":", values[key])
	}
	fmt.Fprint(w, "}\n")
	check(w.Flush())
}
